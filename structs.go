// Code generated by github.com/atombender/go-jsonschema
// Edited to remove duplicates

package workspaceaddons

// An action that describes the behavior when a form is submitted - triggered from
// an onclick event on an input widget (e.g. button).
type Action struct {
	// The apps script callback function or the https endpoint if using alternate
	// runtimes.
	Function string `json:"function"`
}

// Google Workspace add-on response to interact with the end user. The most common
// interaction is to render a card with a navigation.
type NavigationAction struct {
	// Immediately open the target link in a new tab or a popup.
	Link OpenLink `json:"link,omitempty"`

	// Specify the navigation within the card stack.
	Navigations []Navigation `json:"navigations,omitempty"`

	// Display a notification to the end-user.
	Notification *Notification `json:"notification,omitempty"`
}

// A map of parameter string keys and values. These keys and values are defined by
// the add-on developer to attach information to a specific conference for the
// add-on's use.
type AddOnParameters struct {
	// Parameters corresponds to the JSON schema field "parameters".
	Parameters AddOnParametersParameters `json:"parameters,omitempty"`
}

type AddOnParametersParameters map[string]string

type Attendee struct {
	// The number of additional guests the attendee had indicated they are bringing.
	// Defaults to zero.
	AdditionalGuests int `json:"additionalGuests,omitempty"`

	// The attendee's response comment, if any.
	Comment *string `json:"comment,omitempty"`

	// The attendee displayed name.
	DisplayName *string `json:"displayName,omitempty"`

	// The attendee email address.
	Email *string `json:"email,omitempty"`

	// true if the attendance for this attendee is marked as optional; false
	// otherwise.
	Optional *bool `json:"optional,omitempty"`

	// true if the attendee is an organizer for this event.
	Organizer *bool `json:"organizer,omitempty"`

	// true if the attendee represents a resource, such as room or piece of equipment;
	// false otherwise.
	Resource *bool `json:"resource,omitempty"`

	// The attendee's response status. Possible values include the following:
	// accepted: The attendee has accepted the event invitation.
	// declined: The attendee has declined the event invitation.
	// needsAction: The attendee has not responded to the event invitation.
	// tentative: The attendee has tentatively accepted the event invitation.
	ResponseStatus *string `json:"responseStatus,omitempty"`

	// true if this attendee represents the calendar in which this event appears;
	// false otherwise.
	Self *bool `json:"self,omitempty"`
}

type AuthorizationEventObject struct {
	// An ID token for the Google Workspace Add-ons service account for this
	// deployment
	SystemIdToken *string `json:"systemIdToken,omitempty"`

	// An end-user ID token, if appropriate ID scopes are requested
	UserIdToken *string `json:"userIdToken,omitempty"`

	// The end user OAuth access token, authorized with the requested scopes
	UserOAuthToken *string `json:"userOAuthToken,omitempty"`
}

// A border style.
type BorderStyle struct {
	// The border corner radius.
	CornerRadius *float64 `json:"cornerRadius,omitempty"`

	// The border color.
	StrokeColor *Color `json:"strokeColor,omitempty"`

	// The border type.
	Type BorderStyleType `json:"type"`
}

type BorderStyleType string

const (
	BorderStyleTypeNOBORDER BorderStyleType = "NO_BORDER"
	BorderStyleTypeSTROKE   BorderStyleType = "STROKE"
)

// A button. Can be a text button or an image button.
type Button struct {
	// If set, the button is filled with solid background.
	Color *Color `json:"color,omitempty"`

	// If true, the button is displayed in a disabled state and doesn't respond to
	// user actions
	Disabled *bool `json:"disabled,omitempty"`

	// The icon image
	Icon *Icon `json:"icon,omitempty"`

	// The onClick action of the button.
	OnClick *OnClick `json:"onClick"`

	// The text of the button.
	Text string `json:"text"`
}

type ButtonList struct {
	// A list of buttons laid out horizontally
	Buttons []Button `json:"buttons,omitempty"`
}

type CalendarClientActionMarkup struct {
	// EditAttendeesActionMarkup corresponds to the JSON schema field
	// "editAttendeesActionMarkup".
	EditAttendeesActionMarkup *EditAttendeesActionMarkup `json:"editAttendeesActionMarkup,omitempty"`

	// EditConferenceDataActionMarkup corresponds to the JSON schema field
	// "editConferenceDataActionMarkup".
	EditConferenceDataActionMarkup *EditConferenceDataActionMarkup `json:"editConferenceDataActionMarkup,omitempty"`
}

// The Calendar event object is the portion of the overall event object that
// carries information about a user's calendar and calendar events. It's only
// present in an event object if the host application is Google Calendar.
type CalendarEventObject struct {
	// A list of the attendees of the calendar event.
	Attendees []Attendee `json:"attendees,omitempty"`

	// The calendar ID.
	CalendarId *string `json:"calendarId,omitempty"`

	// An object describing the capabilities of the add-on to view or update event
	// information.
	Capabilities *CalendarEventObjectCapabilities `json:"capabilities,omitempty"`

	// An object representing any conference data associated with this event, such as
	// Google Meet conference details.
	ConferenceData *ConferenceData `json:"conferenceData,omitempty"`

	// The event ID.
	Id *string `json:"id,omitempty"`

	// An object representing the organizer of the event.
	Organizer *CalendarEventObjectOrganizer `json:"organizer,omitempty"`

	// The ID of a recurring event.
	RecurringEventId *string `json:"recurringEventId,omitempty"`
}

// An object describing the capabilities of the add-on to view or update event
// information.
type CalendarEventObjectCapabilities struct {
	// true if the add-on can add new attendees to the event attendee list; false
	// otherwise.
	CanAddAttendees *bool `json:"canAddAttendees,omitempty"`

	// true if the add-on can read the event attendee list; false otherwise.
	CanSeeAttendees *bool `json:"canSeeAttendees,omitempty"`

	// true if the add-on can read the event conference data; false otherwise.
	CanSeeConferenceData *bool `json:"canSeeConferenceData,omitempty"`

	// true if the add-on can update the event conference data; false otherwise.
	CanSetConferenceData *bool `json:"canSetConferenceData,omitempty"`
}

// An object representing the organizer of the event.
type CalendarEventObjectOrganizer struct {
	// The event organizer's email address.
	Email *string `json:"email,omitempty"`
}

type Card struct {
	// The actions of this card.
	CardActions CardAction `json:"cardActions,omitempty"`

	// The Display Style for the peekCardHeader.
	DisplayStyle *CardDisplayStyle `json:"displayStyle,omitempty"`

	// The fixed footer that is shown at the bottom of this card.
	FixedFooter CardFixedFooter `json:"fixedFooter,omitempty"`

	// The Header of the card.
	Header *CardHeader `json:"header,omitempty"`

	// Name of the card which is used as an identifier for the card in the card
	// navigation.
	Name *string `json:"name,omitempty"`

	// When displaying contextual content, the peek card header acts as a placeholder
	// so that the user can
	// navigate forward between the homepage cards and the contextual cards.
	PeekCardHeader *CardHeader `json:"peekCardHeader,omitempty"`

	// A card consist of 1 or more sections. Widgets are defined within a section.
	Sections []Section `json:"sections"`
}

// A Card action is the action associated with the card.
type CardAction interface{}

type CardDisplayStyle string

const (
	CardDisplayStyleDISPLAYSTYLEUNSPECIFIED CardDisplayStyle = "DISPLAY_STYLE_UNSPECIFIED"
	CardDisplayStylePEEK                    CardDisplayStyle = "PEEK"
	CardDisplayStyleREPLACE                 CardDisplayStyle = "REPLACE"
)

// A persistent (sticky) footer that is added to the bottom of the card.
type CardFixedFooter interface{}

// Optional header in the card.
type CardHeader struct {
	// The Alternative text of this image
	ImageAltText *string `json:"imageAltText,omitempty"`

	// Define the cropping of the image in the header.
	ImageType *CardHeaderImageType `json:"imageType,omitempty"`

	// Optional - renders an image on the right of the title.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Optional - renders beneath the title. If not specified, title will take up both
	// lines.
	Subtitle *string `json:"subtitle,omitempty"`

	// Required title in the header.
	Title string `json:"title"`
}

// Optional header in the card.

type CardHeaderImageType string

const (
	CardHeaderImageTypeCIRCLE CardHeaderImageType = "CIRCLE"
	CardHeaderImageTypeSQUARE CardHeaderImageType = "SQUARE"
)

// Represents a color in the RGBA color space.
type Color struct {
	// The alpha value of the color as a value in the interval [0, 1]. 1 is sloid
	// color and 0 is transparent
	Alpha *float64 `json:"alpha,omitempty"`

	// The amount of blue in the color as a value in the interval [0, 1]
	Blue float64 `json:"blue"`

	// The amount of green in the color as a value in the interval [0, 1]
	Green float64 `json:"green"`

	// The amount of red in the color as a value in the interval [0, 1]
	Red float64 `json:"red"`
}

// An object containing information common to all event objects, regardless of the
// host application.
type CommonEventObject struct {
	// A map containing the current values of the widgets in the displayed card. The
	// map keys are the string IDs assigned with each widget, and each value is
	// another wrapper object with a single "" key.
	FormInputs CommonEventObjectFormInputs `json:"formInputs,omitempty"`

	// Indicates the host app the add-on is active in when the event object is
	// generated. Possible values include the following:
	// GMAIL
	// CALENDAR
	// DRIVE
	HostApp *CommonEventObjectHostApp `json:"hostApp,omitempty"`

	// Any additional parameters.
	Parameters CommonEventObjectParameters `json:"parameters,omitempty"`

	// Indicates where the event originates (`WEB`, `IOS`, or `ANDROID`)
	Platform *CommonEventObjectPlatform `json:"platform,omitempty"`

	// The timezone ID and offset. To enable this field, you must set
	// `addOns.common.useLocaleFromApp` to `true` in your add-on's manifest. Your
	// add-on's scope list must also include
	// `https://www.googleapis.com/auth/script.locale`
	//  See https://developers.google.com/workspace/add-ons/how-tos/access-user-locale
	// for more details
	TimeZone *TimeZone `json:"timeZone,omitempty"`

	// The user's language and country/region identifier in the format of ISO 639
	// language code-ISO 3166 country/region code. For example, en-US.
	UserLocale *string `json:"userLocale,omitempty"`
}

// A map containing the current values of the widgets in the displayed card. The
// map keys are the string IDs assigned with each widget, and each value is another
// wrapper object with a single "" key.
type CommonEventObjectFormInputs map[string]struct {
	// DateInput corresponds to the JSON schema field "dateInput".
	DateInput *DateInput `json:"dateInput,omitempty"`

	// DateTimeInput corresponds to the JSON schema field "dateTimeInput".
	DateTimeInput *DateTimeInput `json:"dateTimeInput,omitempty"`

	// StringInputs corresponds to the JSON schema field "stringInputs".
	StringInputs *StringInputs `json:"stringInputs,omitempty"`

	// TimeInput corresponds to the JSON schema field "timeInput".
	TimeInput *TimeInput `json:"timeInput,omitempty"`
}

type CommonEventObjectHostApp string

const (
	CommonEventObjectHostAppCALENDAR CommonEventObjectHostApp = "CALENDAR"
	CommonEventObjectHostAppDRIVE    CommonEventObjectHostApp = "DRIVE"
	CommonEventObjectHostAppGMAIL    CommonEventObjectHostApp = "GMAIL"
)

// Any additional parameters.
type CommonEventObjectParameters map[string]string

type CommonEventObjectPlatform string

const (
	CommonEventObjectPlatformANDRIOD CommonEventObjectPlatform = "ANDRIOD"
	CommonEventObjectPlatformIOS     CommonEventObjectPlatform = "IOS"
	CommonEventObjectPlatformWEB     CommonEventObjectPlatform = "WEB"
)

type ConferenceData struct {
	// The ID of the conference. This ID is meant to allow applications to keep track
	// of conferences; you shouldn't display this ID to users.
	ConferenceId *string `json:"conferenceId,omitempty"`

	// An object representing the conference solution, such as Hangouts or Google
	// Meet.
	ConferenceSolution *ConferenceSolution `json:"conferenceSolution,omitempty"`

	// The list of conference entry points, such as URLs or phone numbers.
	EntryPoints []EntryPoint `json:"entryPoints,omitempty"`

	// Additional notes (such as instructions from the domain administrator or legal
	// notices) about the conference to display to the user. Can contain HTML. The
	// maximum length is 2048 characters.
	Notes *string `json:"notes,omitempty"`

	// An object containing a map of defined parameter data for use by the add-on.
	Parameters Parameters `json:"parameters,omitempty"`
}

// An object representing the conference solution, such as Hangouts or Google Meet.
type ConferenceSolution struct {
	// The URI for the user-visible icon representing this conference solution.
	IconUri *string `json:"iconUri,omitempty"`

	// The key which uniquely identifies the conference solution for this event.
	Key *ConferenceSolutionKey `json:"key,omitempty"`

	// The user-visible name of this conference solution (not localized).
	Name *string `json:"name,omitempty"`
}

// The key which uniquely identifies the conference solution for this event.
type ConferenceSolutionKey struct {
	// The conference solution type. Possible values include the following:
	// eventHangout for Hangouts for consumers (http://hangouts.google.com).
	// eventNamedHangout for classic Hangouts for Google Workspace users
	// (http://hangouts.google.com).
	// hangoutsMeet for Google Meet (http://meet.google.com).
	Type *string `json:"type,omitempty"`
}

// An object representing the conference solution, such as Hangouts or Google Meet.
// Input Parameter for Date Picker widget.
type DateInput struct {
	// The time selected by the user, in milliseconds since epoch (00:00:00 UTC on 1
	// January 1970).
	MsSinceEpoch *int `json:"msSinceEpoch,omitempty"`
}

// Input Parameter for Date and Time Picker widget.
type DateTimeInput struct {
	// true if the input date time includes a date; if false only a time is included.
	HasDate *bool `json:"hasDate,omitempty"`

	// true if the input date time includes a time; if false only a date is included.
	HasTime *bool `json:"hasTime,omitempty"`

	// The time selected by the user, in milliseconds since epoch (00:00:00 UTC on 1
	// January 1970).
	MsSinceEpoch *int `json:"msSinceEpoch,omitempty"`
}

// The widget to allow users to specify date and time
type DateTimePicker interface{}

type DecoratedText struct {
	// The formatted text label that shows below the main text.
	BottomLabel *string `json:"bottomLabel,omitempty"`

	// A button that can be clicked to trigger an action
	Button *Button `json:"button,omitempty"`

	// The icon displayed in front of the text.
	Icon *Icon `json:"icon,omitempty"`

	// Define the cropping of the image.
	ImageType *DecoratedTextImageType `json:"imageType,omitempty"`

	// Only the top/bottom label + content region is clickable.
	OnClick *OnClick `json:"onClick,omitempty"`

	// A switch widget can be clicked to change its state or trigger an action.
	SwitchControl *SwitchControl `json:"switchControl,omitempty"`

	// The main widget formatted text.
	Text string `json:"text"`

	// The formatted text label that shows above the main text.
	TopLabel *string `json:"topLabel,omitempty"`

	// The wrap text setting. If true, the text is wrapped and displayed in multiline.
	// Otherwise the text is truncated.
	WrapText *bool `json:"wrapText,omitempty"`
}

type DecoratedTextImageType string

const (
	DecoratedTextImageTypeCIRCLE DecoratedTextImageType = "CIRCLE"
	DecoratedTextImageTypeSQUARE DecoratedTextImageType = "SQUARE"
)

// A horizontal divider.
type Divider map[string]interface{}

// The Docs event object is the portion of the overall event object that carries
// information about a user's Google Docs document. It's only present in an event
// object if the host application is Google Docs.
type DocsEventObject struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Docs UI
	Id *string `json:"id,omitempty"`

	// Object that contains the URL that matches the pattern set in the link preview
	// trigger.
	MatchedUrl *DocsEventObjectMatchedUrl `json:"matchedUrl,omitempty"`

	// The title of the document open in the Docs UI
	Title *string `json:"title,omitempty"`
}

// Object that contains the URL that matches the pattern set in the link preview
// trigger.
type DocsEventObjectMatchedUrl struct {
	// URL that matches the pattern set in the link preview trigger.
	Url *string `json:"url,omitempty"`
}

type DriveClientActionMarkup struct {
	// RequestFileScope corresponds to the JSON schema field "requestFileScope".
	RequestFileScope *DriveClientActionMarkupRequestFileScope `json:"requestFileScope,omitempty"`
}

type DriveClientActionMarkupRequestFileScope struct {
	// ItemId corresponds to the JSON schema field "itemId".
	ItemId *string `json:"itemId,omitempty"`
}

// The Drive event object is the portion of the overall event object that carries
// information about a user's Google Drive and its contents. It's only present in
// an event object if the host application is Google Drive.
type DriveEventObject struct {
	// The Drive item currently active.
	ActiveCursorItem *DriveItemMetaData `json:"activeCursorItem,omitempty"`

	// A list of items (files or folders) selected in Drive.
	SelectedItems []DriveItemMetaData `json:"selectedItems,omitempty"`
}

type DriveItemMetaData struct {
	// If true, the add-on has requested and received
	// https://www.googleapis.com/auth/drive.file scope authorization for this item;
	// otherwise this field is false.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty"`

	// The URL of the icon that represents the selected item.
	IconUrl *string `json:"iconUrl,omitempty"`

	// The ID of the selected item.
	Id *string `json:"id,omitempty"`

	// The MIME type of the selected item.
	MimeType *string `json:"mimeType,omitempty"`

	// The title of the selected item.
	Title *string `json:"title,omitempty"`
}

type EditAttendeesActionMarkup struct {
	// AddAttendeeEmails corresponds to the JSON schema field "addAttendeeEmails".
	AddAttendeeEmails []string `json:"addAttendeeEmails,omitempty"`
}

type EditConferenceDataActionMarkup struct {
	// "$ref": "./conferenceDataMarkupSchema.json#/definitions/conferenceDataMarkup
	SetConferenceData *string `json:"setConferenceData,omitempty"`
}

type EditorClientActionMarkup struct {
	// RequestFileScopeForActiveDocument corresponds to the JSON schema field
	// "request_file_scope_for_active_document".
	RequestFileScopeForActiveDocument EditorClientActionMarkupRequestFileScopeForActiveDocument `json:"request_file_scope_for_active_document,omitempty"`
}

type EditorClientActionMarkupRequestFileScopeForActiveDocument map[string]interface{}

type EditorClientActionMarkupRequestFileScopeForActiveDocument_1 map[string]interface{}

// Entry point objects carry information about the established means of accessing a
// given conference, such as by phone or video. This information is present in the
// event object if and only if the data is present in the Calendar event and the
// add-on sets its addOns.calendar.currentEventAccess manifest
// (https://developers.google.com/workspace/add-ons/concepts/manifests#calendar_fields)
// field to READ or READ_WRITE.
type EntryPoint interface{}

// Event objects are JSON structures that are automatically constructed and passed
// as parameters to trigger or callback functions when a user interacts with an
// add-on (https://developers.google.com/workspace/add-ons/concepts/event-objects)
type EventObject struct {
	// Set for requests to HTTP endpoints
	AuthorizationEventObject *AuthorizationEventObject `json:"authorizationEventObject,omitempty"`

	// An object containing calendar and event information.
	Calendar *CalendarEventObject `json:"calendar,omitempty"`

	// CommonEventObject corresponds to the JSON schema field "commonEventObject".
	CommonEventObject *CommonEventObject `json:"commonEventObject,omitempty"`

	// An object containing Docs information.
	Docs *DocsEventObject `json:"docs,omitempty"`

	// An object containing Drive information.
	Drive *DriveEventObject `json:"drive,omitempty"`

	// An object containing Gmail information.
	Gmail *GmailEventObject `json:"gmail,omitempty"`

	// An object containing Sheets information.
	Sheets *SheetsEventObject `json:"sheets,omitempty"`

	// An object containing Slides information.
	Slides *SlidesEventObject `json:"slides,omitempty"`
}

type GetAutocompletionResponse struct {
	// AutoComplete corresponds to the JSON schema field "autoComplete".
	AutoComplete Suggestions `json:"autoComplete"`

	// This is a no-op schema field that may be present in the markup for syntax
	// checking.
	Schema *string `json:"schema,omitempty"`
}

type GmailClientActionMarkup struct {
	// Open Created Draft Action Markup
	OpenCreatedDraftActionMarkup *OpenCreatedDraftActionMarkup `json:"openCreatedDraftActionMarkup,omitempty"`

	// Update Draft Action Markup
	UpdateDraftActionMarkup *UpdateDraftActionMarkup `json:"updateDraftActionMarkup,omitempty"`
}

// The Gmail event object is the portion of the overall event object that carries
// information about a user's Gmail messages. It's only present in an event object
// if the host application is Gmail.
type GmailEventObject struct {
	// The Gmail-specific access token. You can use this token with the
	// "X-Goog-Gmail-Access-Token" HTTP header to grant your add-on temporary access
	// to a user's currently open Gmail message or let your add-on compose new drafts.
	AccessToken *string `json:"accessToken,omitempty"`

	// The list of "BCC:" recipient email addresses currently included in a draft the
	// add-on is composing
	BccRecipients []string `json:"bccRecipients,omitempty"`

	// The list of "CC:" recipient email addresses currently included in a draft the
	// add-on is composing
	CcRecipients []string `json:"ccRecipients,omitempty"`

	// The ID of the currently open Gmail message.
	MessageId *string `json:"messageId,omitempty"`

	// The currently open Gmail thread ID.
	ThreadId *string `json:"threadId,omitempty"`

	// The list of "To:" recipient email addresses currently included in a draft the
	// add-on is composing
	ToRecipients []string `json:"toRecipients,omitempty"`
}

// A grid that displays a collection of grid items.
type Grid struct {
	// The border style for the grid items.
	BorderStyle *BorderStyle `json:"borderStyle,omitempty"`

	// The number of columns in the grid.
	ColumnCount *float64 `json:"columnCount,omitempty"`

	// List of grid items.
	Items []Griditem `json:"items,omitempty"`

	// The action that executes when a grid item is clicked.
	OnClick *OnClick `json:"onClick,omitempty"`

	// The title of the grid.
	Title *string `json:"title,omitempty"`
}

// An item that can be displayed in a grid widget.
type Griditem struct {
	// An identifier for the grid item.
	Id *string `json:"id,omitempty"`

	// The image to display in the grid item.
	Image *ImageComponent `json:"image,omitempty"`

	// The grid item layout.
	Layout *GriditemLayout `json:"layout,omitempty"`

	// The subtitle of the grid item.
	Subtitle *string `json:"subtitle,omitempty"`

	// The text alignment for the grid item's text.
	TextAlignment *HorizontalAlignment `json:"textAlignment,omitempty"`

	// The title of the grid item.
	Title *string `json:"title,omitempty"`
}

type GriditemLayout string

const (
	GriditemLayoutTEXTABOVE GriditemLayout = "TEXT_ABOVE"
	GriditemLayoutTEXTBELOW GriditemLayout = "TEXT_BELOW"
)

type HorizontalAlignment string

const (
	HorizontalAlignmentCENTER HorizontalAlignment = "CENTER"
	HorizontalAlignmentEND    HorizontalAlignment = "END"
	HorizontalAlignmentSTART  HorizontalAlignment = "START"
)

type HostAppActionMarkup struct {
	// CalendarAction corresponds to the JSON schema field "calendarAction".
	CalendarAction *CalendarClientActionMarkup `json:"calendarAction,omitempty"`

	// "$ref": "./drive_schema.json#/definitions/drive_client_action_markup
	DriveAction *string `json:"driveAction,omitempty"`

	// EditorAction corresponds to the JSON schema field "editor_action".
	EditorAction *EditorClientActionMarkup `json:"editor_action,omitempty"`

	// GmailAction corresponds to the JSON schema field "gmailAction".
	GmailAction *GmailClientActionMarkup `json:"gmailAction,omitempty"`
}

// The icon, can be specified by KnownIcon string or a URL.
type Icon struct {
	// The description of icon which is used for accessibility.
	AltText *string `json:"altText,omitempty"`
}

// Image widget.
type Image struct {
	// Sets the alternative text of the image for accessibility.
	AltText *string `json:"altText,omitempty"`

	// Sets the image to use by providing its URL or data string.
	ImageUrl string `json:"imageUrl"`

	// Sets an action that executes when the object is clicked.
	OnClick *OnClick `json:"onClick,omitempty"`
}

// An image and its properties.
type ImageComponent struct {
	// The accessibility label for the image.
	AltText *string `json:"altText,omitempty"`

	// The border style to apply to the image.
	BorderStyle *BorderStyle `json:"borderStyle,omitempty"`

	// The crop style to apply to the image.
	CropStyle *ImageCropStyle `json:"cropStyle,omitempty"`

	// The URL for the image resource.
	ImageUri string `json:"imageUri"`
}

// A crop style that can be applied to images.
type ImageCropStyle struct {
	// The aspect ratio for a custom rectangular crop.
	AspectRatio *float64 `json:"aspectRatio,omitempty"`

	// The crop type.
	Type ImageCropStyleType `json:"type"`
}

type ImageCropStyleType string

const (
	ImageCropStyleTypeCIRCLE          ImageCropStyleType = "CIRCLE"
	ImageCropStyleTypeRECTANGLE43     ImageCropStyleType = "RECTANGLE_4_3"
	ImageCropStyleTypeRECTANGLECUSTOM ImageCropStyleType = "RECTANGLE_CUSTOM"
	ImageCropStyleTypeSQUARE          ImageCropStyleType = "SQUARE"
)

type InsertContent struct {
	// The content to be inserted
	Content *string `json:"content,omitempty"`

	// The type of inserted content
	ContentType *InsertContentContentType `json:"contentType,omitempty"`
}

type InsertContentContentType string

const (
	InsertContentContentTypeIMMUTABLEHTML InsertContentContentType = "IMMUTABLE_HTML"
	InsertContentContentTypeMUTABLEHTML   InsertContentContentType = "MUTABLE_HTML"
	InsertContentContentTypeTEXT          InsertContentContentType = "TEXT"
)

type InsertContentContentType_1 string

const (
	InsertContentContentType_1_IMMUTABLEHTML InsertContentContentType_1 = "IMMUTABLE_HTML"
	InsertContentContentType_1_MUTABLEHTML   InsertContentContentType_1 = "MUTABLE_HTML"
	InsertContentContentType_1_TEXT          InsertContentContentType_1 = "TEXT"
)

type Navigation struct {
	// Card stack pops one card off.
	Pop *bool `json:"pop,omitempty"`

	// Card stack pops all cards above the specified card with given card name.
	PopToCard *string `json:"popToCard,omitempty"`

	// Card stack pops all card off except the root card.
	PopToRoot *bool `json:"popToRoot,omitempty"`

	// A card to push on top of the stack, which will be shown to end users.
	PushCard *Card `json:"pushCard,omitempty"`

	// Card stack updates the top card with a new card, preserving filled form
	// fields values. For non-equivalent field, the value is dropped.
	UpdateCard *Card `json:"updateCard,omitempty"`
}

// Card action which displays a notification in the host app.
type Notification struct {
	// Plain text to display for the notification, without html tags.
	Text *string `json:"text,omitempty"`
}

type OnClick struct {
	// An action is triggered by this onClick, if specified.
	Action *Action `json:"action,omitempty"`

	// A new card is pushed to the card stack after clicking if specified.
	Card *Card `json:"card,omitempty"`

	// An add-on triggers this action when the action needs to open a link.
	// This differs from the openLink above in that this needs to talk to server to
	// get the link.
	// Thus some preparation work is required for web client to do before the open
	// link action response comes back.
	OpenDynamicLinkAction *Action `json:"openDynamicLinkAction,omitempty"`

	// This onClick triggers an open link action if specified.
	OpenLink *OpenLink `json:"openLink,omitempty"`
}

type OpenCreatedDraftActionMarkup struct {
	// The ID of the newly-created draft in the form "r123".
	DraftId *string `json:"draftId,omitempty"`

	// The ID of the thread containing the newly-created draft, e.g.,
	// "15e9fa622ce1029d".
	DraftThreadId *string `json:"draftThreadId,omitempty"`
}

// Opens a URL
// type OpenLink interface{}

// Opens a URL
type OpenLink struct {
	// OnClose corresponds to the JSON schema field "onClose".
	OnClose *OpenLinkOnClose `json:"onClose,omitempty" yaml:"onClose,omitempty" mapstructure:"onClose,omitem
pty"`

	// When an onClick opens a link, then the client can either open it as a
	//  full size (window if that is the frame used by the client), or an
	//  overlay (such as a pop-up). The implementation depends on the client
	// platform capabilities, and the value selected may be ignored if the
	// client does not support it. FULL_SIZE is supported by all clients.
	OpenAs *OpenLinkOpenAs `json:"openAs,omitempty" yaml:"openAs,omitempty" mapstructure:"openAs,omitempty"`

	// The URL to open.
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type OpenLinkOnClose string

const (
	OpenLinkOnCloseNOTHING OpenLinkOnClose = "NOTHING"
	OpenLinkOnCloseRELOAD  OpenLinkOnClose = "RELOAD"
)

type OpenLinkOpenAs string

const (
	OpenLinkOpenAsFULLSIZE OpenLinkOpenAs = "FULL_SIZE"
	OpenLinkOpenAsOVERLAY  OpenLinkOpenAs = "OVERLAY"
)

// An object containing a map of defined parameter data for use by the add-on.
type Parameters interface{}

// recipient
type Recipient struct {
	// Email corresponds to the JSON schema field "email".
	Email *string `json:"email,omitempty"`
}

type RenderAction struct {
	// Google Workspace add-on response to interact with the end user. The most common
	// interaction is to render a card with a navigation.
	Action *NavigationAction `json:"action,omitempty"`

	// Actions handled by individual host apps.
	HostAppAction *HostAppActionMarkup `json:"hostAppAction,omitempty"`

	// This is a no-op schema field that may be present in the markup for syntax
	//  checking.
	Schema *string `json:"schema,omitempty"`
}

type Section struct {
	// Whether section can be collapsed or not.
	Collapsible *bool `json:"collapsible,omitempty"`

	// The text header of a section
	Header *string `json:"header,omitempty"`

	// The number of uncollapsable widgets
	UncollapsibleWidgetsCount *float64 `json:"uncollapsibleWidgetsCount,omitempty"`

	// The widgets within a section. Example of a widget is TextParagraph or Image.
	Widgets []Widget `json:"widgets"`
}

// A widget which creates a UI item (for example, a drop-down list) with options
// for users to select.
type SelectionInput interface{}

// The item in the switch control.
type SelectionItem struct {
	// If more than one items are selected for RADIO_BUTTON or DROPDOWN,
	// the first selected item is treated as selected and the after ones are all
	// ignored.
	Selected *bool `json:"selected,omitempty"`

	// The text to be displayed
	Text *string `json:"text,omitempty"`

	// The value associated with this item which is sent back to Apps Script.
	// The client should use this as a form input value.
	Value *string `json:"value,omitempty"`
}

// The item in the switch control.
type SelectionItem_1 struct {
	// If more than one items are selected for RADIO_BUTTON or DROPDOWN,
	// the first selected item is treated as selected and the after ones are all
	// ignored.
	Selected *bool `json:"selected,omitempty"`

	// The text to be displayed
	Text *string `json:"text,omitempty"`

	// The value associated with this item which is sent back to Apps Script.
	// The client should use this as a form input value.
	Value *string `json:"value,omitempty"`
}

// The Docs event object is the portion of the overall event object that carries
// information about a user's Google Sheet and its contents. It's only present in
// an event object if the host application is Google Sheets.
type SheetsEventObject struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Sheets UI
	Id *string `json:"id,omitempty"`

	// The title of the document open in the Sheets UI
	Title *string `json:"title,omitempty"`
}

// The Slides event object is the portion of the overall event object that carries
// information about a user's Google Slides document. It's only present in an event
// object if the host application is Google Slides.
type SlidesEventObject struct {
	//  Whether or not the add-on has drive.file scope permission for this document.
	AddonHasFileScopePermission *bool `json:"addonHasFileScopePermission,omitempty"`

	// The ID of the document open in the Slides UI
	Id *string `json:"id,omitempty"`

	// The title of the document open in the Slides UI
	Title *string `json:"title,omitempty"`
}

// Input parameter for regular widgets.
// For single-valued widgets, it will be a single value list; for
// multi-valued widgets, such as checkbox, all the values are presented.
type StringInputs struct {
	// Value corresponds to the JSON schema field "value".
	Value []string `json:"value,omitempty"`
}

type SubmitFormResponse struct {
	// RenderActions corresponds to the JSON schema field "renderActions".
	RenderActions RenderAction `json:"renderActions"`

	// Whether the state of the cards has changed and data in existing cards is stale.
	StateChanged *bool `json:"stateChanged,omitempty"`
}

// A Suggestion Item. Only supports text for now.
type SuggestionItem struct {
	// Text.
	Text *string `json:"text,omitempty"`
}

// A container wrapping elements necessary for showing suggestion items used in
// text input autocomplete.
type Suggestions interface{}

type SwitchControl struct {
	// The control type, it could be either Switch or Checkbox.
	ControlType *SwitchControlControlType `json:"controlType,omitempty"`

	// The name of the switch widget which is used in formInput.
	Name *string `json:"name,omitempty"`

	// The action when the switch state is changed.
	OnChangeAction *Action `json:"onChangeAction,omitempty"`

	// If the switch is selected.
	Selected *bool `json:"selected,omitempty"`

	// The value is what is passed back in the Apps Script callback.
	Value *string `json:"value,omitempty"`
}

type SwitchControlControlType string

const (
	SwitchControlControlTypeCHECKBOX SwitchControlControlType = "CHECKBOX"
	SwitchControlControlTypeSWITCH   SwitchControlControlType = "SWITCH"
)

// A text input is a UI item where the users can input text.
type TextInput struct {
	// The refresh function which returns suggestions based on the user's input text.
	AutoCompleteAction *Action `json:"autoCompleteAction,omitempty"`

	// The hint text.
	HintText *string `json:"hintText,omitempty"`

	// The initial suggestions made before any user input
	InitialSuggestions Suggestions `json:"initialSuggestions,omitempty"`

	// At least one of label and hintText is required to be specified.
	Label *string `json:"label,omitempty"`

	// When set to true, a user can input multiple suggestions items.
	MultipleSuggestions *bool `json:"multipleSuggestions,omitempty"`

	// The name of the text input which is used in formInput.
	Name string `json:"name"`

	// The onChange action (for example, invoke an Apps Script)
	OnChangeAction *Action `json:"onChangeAction,omitempty"`

	// The style of the text (for example, single line or multiple line).
	Type *TextInputType `json:"type,omitempty"`

	// The default value when no input from user.
	Value *string `json:"value,omitempty"`
}

type TextInputType string

const (
	TextInputTypeMULTIPLELINE TextInputType = "MULTIPLE_LINE"
	TextInputTypeSINGLELINE   TextInputType = "SINGLE_LINE"
)

type TextInputType_1 string

const (
	TextInputType_1_MULTIPLELINE TextInputType_1 = "MULTIPLE_LINE"
	TextInputType_1_SINGLELINE   TextInputType_1 = "SINGLE_LINE"
)

// Text paragraph widget.
type TextParagraph struct {
	// The text of the paragraph. Can contain formatted text.
	Text string `json:"text"`
}

// Input Parameter for Time Picker widget.
type TimeInput struct {
	// The hour number selected by the user.
	Hours *int `json:"hours,omitempty"`

	// The minute number selected by the user.
	Minutes *int `json:"minutes,omitempty"`
}

type TimeZone struct {
	// The timezone identifier of the user's timezone. Examples include:
	// America/New_York, Europe/Vienna, and Asia/Seoul. To enable this field, you must
	// set `addOns.common.useLocaleFromApp` to `true` in your add-on's manifest. Your
	// add-on's scope list must also include
	// `https://www.googleapis.com/auth/script.locale`. See
	// https://developers.google.com/workspace/add-ons/how-tos/access-user-locale for
	// more details
	Id *string `json:"id,omitempty"`

	// The time offset from Coordinated Universal Time (UTC) of the user's timezone,
	// measured in milliseconds. See
	// https://developers.google.com/workspace/add-ons/how-tos/access-user-locale for
	// more details
	Offset *int `json:"offset,omitempty"`
}

// If set, replaces the existing Bcc recipients of the draft the user is currently
// editing.
type UpdateBccRecipients struct {
	// BCC Recipients
	BccRecipients []Recipient `json:"BccRecipients,omitempty"`
}

// A field which contains a series of updates action to perform on the draft
//
//	body that user is currently editing.
type UpdateBody struct {
	// A repeated field which contains a series of insert content to perform
	//  on the draft that user is currently editing. The content currently
	//  contains 1) HTML content or 2) plain text content.
	InsertContents []InsertContent `json:"insertContents,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *UpdateBodyType `json:"type,omitempty"`
}

type UpdateBodyType string

const UpdateBodyTypeINPLACEINSERT UpdateBodyType = "IN_PLACE_INSERT"

// If set, replaces the existing Cc recipients of the draft the user is currently
// editing.
type UpdateCcRecipients struct {
	// CC Recipients
	CcRecipients []Recipient `json:"CcRecipients,omitempty"`
}

type UpdateDraftActionMarkup struct {
	// Update BCC Recipients.
	UpdateBccRecipients *UpdateBccRecipients `json:"updateBccRecipients,omitempty"`

	// UpdateBody corresponds to the JSON schema field "updateBody".
	UpdateBody *UpdateBody `json:"updateBody,omitempty"`

	// Update CC Recipients.
	UpdateCcRecipients *UpdateCcRecipients `json:"updateCcRecipients,omitempty"`

	// Update Subject
	UpdateSubject *UpdateSubject `json:"updateSubject,omitempty"`

	// Update To Recipients.
	UpdateToRecipients *UpdateToRecipients `json:"updateToRecipients,omitempty"`
}

// If set, replaces the existing subject of the draft the user is currently
// editing.
type UpdateSubject struct {
	// Subject corresponds to the JSON schema field "subject".
	Subject *string `json:"subject,omitempty"`
}

// If set, replaces the existing To recipients of the draft the user is currently
// editing.
type UpdateToRecipients struct {
	// To Recipients
	ToRecipients []Recipient `json:"toRecipients,omitempty"`
}

type Widget struct {
	// A List of buttons
	ButtonList *ButtonList `json:"buttonList,omitempty"`

	// Display a date/time picker in this widget
	DateTimePicker DateTimePicker `json:"dateTimePicker,omitempty"`

	// Display a decorated text item in this widget
	DecoratedText *DecoratedText `json:"decoratedText,omitempty"`

	// Inserts a divider.
	Divider Divider `json:"divider,omitempty"`

	// Display a grid control in this widget.
	Grid *Grid `json:"grid,omitempty"`

	// The horizontal alignment of this widget.
	HorizontalAlignment *HorizontalAlignment `json:"horizontalAlignment,omitempty"`

	// Display an image in this widget
	Image *Image `json:"image,omitempty"`

	// Display a switch control in this widget
	SelectionInput SelectionInput `json:"selectionInput,omitempty"`

	// Display a text input in this widget
	TextInput *TextInput `json:"textInput,omitempty"`

	// Display a text paragraph in this widget
	TextParagraph *TextParagraph `json:"textParagraph,omitempty"`
}
